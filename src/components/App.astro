<section class="quick-start container">
  <div class="start-guide">
    <button class="start-btn">Comenzar tutorial</button>
  </div>
  <ul class="steps">
    <li class="step step-active"><img class="step-img" id="1" src="/step-1.png" alt="Step 1"></li>
    <li class="step"><img class="step-img" id="2" src="/step-2.png" alt="Step 2"></li>
    <li class="step"><img class="step-img" id="3" src="/step-3.png" alt="Step 3"></li>
    <li class="step"><img class="step-img" id="4" src="/step-4.png" alt="Step 4"></li>
    <li class="step"><img class="step-img" id="5" src="/step-5.png" alt="Step 5"></li>
    <li class="step"><img class="step-img" id="6" src="/step-6.png" alt="Step 6"></li>
    <li class="step"><img class="step-img" id="7" src="/step-7.png" alt="Step 7"></li>
  </ul>
  <nav class="controls">
    <div class="step-indicator">
      <span class="current-step"></span> / <span class="final-step"></span>
    </div>
    <div class="left">
      <button class="play-btn"><i class="fa-solid fa-play"></i></button>
      <div class="audio-controls">
        <button class="volume-btn"><i class="fa-solid fa-volume-high"></i></button>
        <!-- <input class="volume-bar" type="range" id="volume-bar" value="100" max="100"> -->
        <audio class="background-music" loop>
          <source src="/music/background-music.mp3" type="audio/mpeg">
        </audio>
      </div>
    </div>
    <div class="middle">
      <button class="prev-btn"><i class="fa-solid fa-chevron-left"></i></button>
      <button class="next-btn"><i class="fa-solid fa-chevron-right"></i></button>
    </div>
    <div class="right">
      <button class="magnifying-glass-btn"><i class="fa-solid fa-magnifying-glass"></i></button>
      <button class="fullscreen-btn"><i class="fa-solid fa-expand"></i></button>
    </div>
  </nav>
</section>

<style>
	.quick-start {
		--app-color: rgb(240, 240, 240);

    display: flex;
    align-items: center;
    justify-content: center;
		background-color: rgb(240, 240, 240);
		box-shadow: 0px 5px 30px rgb(0, 0, 0, .2);
		position: relative;
	}

	.start-guide {
		position: absolute;
		width: 100%;
		height: 100%;
		display: flex;
		align-items: center;
		justify-content: center;
		background-color: rgb(230, 230, 230, .6);
		z-index: 90;

		& button {
			background-color: black;
			color: white;
			padding: 1em 2em;
		}
	}

	.step-indicator {
		position: absolute;
		bottom: 120%;
		right: 1%;
		padding: .5em;
		border-radius: 10px;
		background-color: rgb(220, 220, 220);
		box-shadow: 0px 0px 10px rgb(0, 0, 0, .2);
		font-size: 1.2em;
		z-index: 80;
	}

	.step {
		display: none;

		&.step-active {
			display: block;
		}
	}

	.step-img {
		width: 100%;
	}

	.controls {
		padding: .6em;
		display: grid;
		grid-template-columns: repeat(3, 1fr);
		position: absolute;
		width: 100%;
		bottom: 0;
		background-color: var(--app-color);
		user-select: none;
    opacity: 1;
    transition: opacity .2s ease-out;

    &:hover {
      opacity: 1;
    }

		& button {
			--size: 3em;

			display: flex;
			align-items: center;
			justify-content: center;
			width: var(--size);
			height: var(--size);
			background-color: rgb(220, 220, 220);
			padding: 1em;
			user-select: none;
			border-radius: 100%;
		}

		& .left {
			display: flex;
			gap: 1em;
			justify-content: start;
		}

		& .middle {
			display: flex;
			gap: 1em;
			justify-content: center;
		}

		& .right {
			display: flex;
			gap: 1em;
			justify-content: end;
		}

		& .audio-controls {
			display: flex;
			gap: 1em;
			align-items: center;
			justify-content: center;
			position: relative;

			& .volume-bar {
				opacity: 0;
				transition: opacity .12s ease-out;
			}
		}

		& .audio-controls:hover .volume-bar {
			opacity: 1;
		}
	}

  @media (width <= 530px) {
    .controls button {
      --size: 2em;
    }
  }
</style>

<script>
  const $ = el => document.querySelector(el)
  const $$ = el => document.querySelectorAll(el)

  const container = $('.quick-start')
  const startBtn = $('.start-btn')
  const fullscreenBtn = $('.fullscreen-btn')
  const currentStep = $('.current-step')
  const finalStep = $('.final-step')
  const playBtn = $('.play-btn')
  const volumeBtn = $('.volume-btn')
  const nextBtn = $('.next-btn')
  const prevBtn = $('.prev-btn')
  const backgroundMsc = $('.background-music')
  const playerControls = $('.controls')
  // const volumeBar = $('.volume-bar')
  const volumeBtnIcon = volumeBtn.querySelector("i")
  const lensBtn = $('.magnifying-glass-btn')
  const lensBtnIcon = lensBtn.querySelector("i")

  // volumeBar.addEventListener('input', () => {
  //   backgroundMsc.volume = volumeBar.value / 100
  // })

  startBtn.addEventListener("click", () => {
    play()
    playerControls.style.opacity = "0"
    container.addEventListener("mousemove", handleControls)
    backgroundMsc.play()
    container.requestFullscreen()
    startBtn.parentElement.remove()
  })

  currentStep.textContent = $('.step-active img').id
  finalStep.textContent = [...$$('.step-img')].length

  let stepActive
  let firstStep = $('.step:first-child')
  let lastStep = $('.step:last-child')
  const slideNext = () => {
    stepActive = $('.step-active')
    let nextStep = stepActive.nextElementSibling
    stepActive.classList.remove("step-active")
    if (nextStep) {
      nextStep.classList.add("step-active")
      currentStep.textContent = nextStep.querySelector("img").id
    } else {
      firstStep.classList.add("step-active")
      currentStep.textContent = firstStep.querySelector("img").id
    }
  }

  const slidePrevious = () => {
    stepActive = $('.step-active')
    let previousStep = stepActive.previousElementSibling
    stepActive.classList.remove("step-active")
    if (previousStep) {
      previousStep.classList.add("step-active")
      currentStep.textContent = previousStep.querySelector("img").id
    } else {
      lastStep.classList.add("step-active")
      currentStep.textContent = lastStep.querySelector("img").id
    }
  }

  let autoSlide
  const play = () => {
    playBtnIcon.classList.replace("fa-play", "fa-pause")
    autoSlide = setInterval(slideNext, 3500)
  }

  const pause = () => {
    playBtnIcon.classList.replace("fa-pause", "fa-play")
    clearInterval(autoSlide)
  }

  const mute = () => {
    volumeBtnIcon.classList.replace("fa-volume-high", "fa-volume-xmark")
    backgroundMsc.muted = true
  }

  const unmute = () => {
    volumeBtnIcon.classList.replace("fa-volume-xmark", "fa-volume-high")
    backgroundMsc.muted = false
  }

  fullscreenBtn.addEventListener("click", () => {
    if (!document.fullscreenElement) {
      container.requestFullscreen()
    } else {
      document.exitFullscreen()
    }
  })

  const playBtnIcon = playBtn.querySelector("i")
  playBtn.addEventListener("click", () => {
    if (playBtnIcon.classList.contains("fa-play")) {
      play()
    } else {
      pause()
    }
  })

  volumeBtn.addEventListener("click", () => {
    volumeBtnIcon.classList.contains("fa-volume-high")
      ? mute()
      : unmute()
  })

  nextBtn.addEventListener("click", () => {
    slideNext()
    if (autoSlide) {
      pause()
    }
  })

  prevBtn.addEventListener("click", () => {
    slidePrevious()
    if (autoSlide) {
      pause()
    }
  })

  // const handleLens = () => {
  //   console.log("hey")
  // }

  // lensBtn.addEventListener("click", () => {
  //   let currentImg = $('.step-active img')
  //   if (lensBtnIcon.classList.contains("fa-magnifying-glass")) {
  //     lensBtnIcon.classList.replace("fa-magnifying-glass", "fa-magnifying-glass-plus")
  //     currentImg.addEventListener("mousemove", handleLens)
  //   } else {
  //     lensBtnIcon.classList.replace("fa-magnifying-glass-plus", "fa-magnifying-glass")
  //     currentImg.removeEventListener("mousemove", handleLens)
  //   }
  // })
  
  let mouseOverControls
  playerControls.addEventListener("mouseenter", () => {
    mouseOverControls = true
    clearTimeout(hideControlsTime)
  })

  playerControls.addEventListener("mouseleave", () => {
    mouseOverControls = false
  })

  let hideControlsTime;
  const handleControls = () => {
    if (!mouseOverControls) {
      clearTimeout(hideControlsTime);
      playerControls.style.opacity = "1";
      container.style.cursor = "auto"
      hideControlsTime = setTimeout(() => {
        container.style.cursor = "none"
        playerControls.style.opacity = "0";
      }, 2000);
    }
  }
</script>